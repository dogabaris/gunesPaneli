<!DOCTYPE html>
<html>
  <head>
    <title>Güneş Paneli Takip Sistemi</title>
    <link rel="stylesheet" href="/js/stylesheets/style.css">
    <link rel="stylesheet" href="/js/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="/js/jquery-ui-1.11.4/jquery-ui.min.css">

    <script src="/js/socket.io.js"></script>
    <script src="/js/moment.min.js"></script>
    <script src="/js/jquery-ui-1.11.4/external/jquery/jquery.js"></script>
    <script src="/js/jquery-ui-1.11.4/jquery-ui.min.js"></script>
    <script src="/js/bootstrap/js/bootstrap.min.js"></script>

    <script src="/js/highstock.js"></script>


    <style>
      .datetimepicker{width:100%;}
    </style>

  </head>
  <body>
    <nav class="navbar navbar-inverse navbar-fixed-top">
      <div class="container">
        <div class="navbar-header"><a href="/" class="navbar-brand">
            Güneş Paneli Takip Sistemi
            </a></div>
        <div id="navbar" class="navbar-collapse collapse">
          <ul class="nav navbar-nav navbar-right">
            <li id="viewPanel" class="active"><a href="/">Panel Takibi</a></li>
            <li id="managePanel"><a href="manage">
                Panel Yönetimi
                </a></li>
          </ul>
        </div>
      </div>
    </nav>
  <div class="jumbotron">
    <div class="container">
      <h1>Güneş Panelleri Takibi</h1>
      <p>
        Bu sayfadan güneş panellerini listeleyebilir, panellere ait detayları takip edebilirsiniz.
        Sayfadaki grafiklerden panellere ait akım, gerilim, ışık, sıcaklık ve nem
        bilgileri anlık olarak izleyebilirsiniz.
      </p>
    </div>
  </div>
  <div class="container">
    <div class="row">
      <div class="col-md-4">
        <h4>Panel Listesi</h4>
        <div class="panel panel-default">
          <table id="panelTable" class="table table-striped table-hover">
            <thead>
              <tr>
                <th>#</th>
                <th>Panel</th>
                <th>İzle</th>
              </tr>
            </thead>
            <tbody></tbody>
          </table>
        </div>
        <h4 style="margin-top: 50px;">Tarih / Anlık Durum</h4>

      <div class="form-group">
        <div class="row">
            <div class="col-md-8">
                <div id="datetimepicker" class="datetimepicker"></div>
            </div>
        </div>
      </div>

      </div>
      <div class="col-md-8">
        <h4 id="chartTitle"></h4>
        <div id="chartDiv"></div>
        <div id="chartOldDataDiv" style="display:none;"></div>
        <div id="chartOldDataYearsDiv" style="display:none;"></div>
        <div id="chartOldDataAllYearsDiv" style="display:none;"></div>
        <div id="chartDetailsDiv" style="display:none;"></div>
        <div id="chartAnlikDiv" style="display:none;"></div>
      </div>
    </div>
  </div>

  <footer class="footer">
    <div class="container">
      <p class="text-muted">
        &copy; Kocaeli Üniversitesi Bilgisayar Mühendisliği 2017
      </p>
    </div>
  </footer>



  <script>
  var chart = null;
  var chartDetails = null;
  var selectedPanelId = null;
  var showCurrent = true;
  var showYillik = null;
  var selectedDate;
  var seriesList = ['akim', 'gerilim', 'sicaklik', 'nem'];
  var activeSeries = 'voltage';
  var Series = {akim:{series: 0}, gerilim: {series: 1}, sicaklik: {series: 2}, nem: {series: 3}};
  var dataListOfTheHistorical = [];
  var dataListOfTheDetail = [];
  var Interval;
  var socket = io();


  $(document).ready(function(){
      $('[data-toggle="tooltip"]').tooltip();
  });

  /* Panelleri bu fonksiyon listeliyor. */
  socket.on('retrievePanelList', function (panelList) {
      $('#panelTable').find('> tbody > tr').remove();

      for (var i = 0; i < panelList.length; i++) {
          if (panelList[i].status) {

              addPanelToTable(i, panelList[i]);
          }
      }
  });


  socket.emit('retrievePanelList', 0, false);//panel listesini getirir


  socket.on('retrievePanelData', function (panelData) {
      if (selectedPanelId == null) return false;
      if (selectedPanelId != panelData.panelId) return false;
      if (!showCurrent) return false;

      if (!chart) {
          chart = getChart();
      }

      if (chart) {
          updateChartWithCurrentData(panelData);
      }
  });

  socket.on('addPanelDataList', function(dataList) {
      dataListOfTheHistorical = dataList;

      updateChartWithHistoricalData();
  });

  socket.on('addPanelDataDetailList', function(dataList) {
      dataListOfTheDetail = dataList;

      updateChartWithDetailsData();
  });

  /* Panelleri tablo şeklinde ekranda gösteriyor. */
  function addPanelToTable(index, panel) {


      var row = '<tr>';
      row += '<th scope="row">' + (index + 1) + '</th>';
      row += '<td>' + panel.name + '</td>';
      row += '<td>';
      row += '<button type="button" data-toggle="tooltip" title="Seçilen Gün!" class="anlik btn btn-default btn-xs" aria-label="Left Align" id="' + panel.id + '_show">';
      row += '<span class="glyphicon glyphicon-eye-close" aria-hidden="true" id="' + panel.id + '_glyph"></span>';
      row += '</button>';
      row += '<button type="button" data-toggle="tooltip" title="Aylar!" class="gecmis btn btn-default btn-xs gecmis-'+panel.id+'" onClick="allDataShow(\'' + panel.id + '\')" style="margin-left:5px;"><span class="glyphicon glyphicon-signal"></span></button>';
      row += '<button type="button" data-toggle="tooltip" title="Günün yıllara oranı!" class="yillik btn btn-default btn-xs yillik-'+panel.id+'" id="' + panel.id + '_showYears" style="margin-left:5px;"><span class="glyphicon glyphicon-search"></span></button>';
      row += '<button type="button" data-toggle="tooltip" title="Yıllar!" class="yillar btn btn-default btn-xs yillar-'+panel.id+'" onClick="allDataAllYearsShow(\'' + panel.id + '\')" style="margin-left:5px;"><span class="glyphicon glyphicon-calendar"></span></button>';
      row += '<button type="button" data-toggle="tooltip" title="Zaman Aralığı!" class="detayli btn btn-default btn-xs detayli-'+panel.id+'" onClick="allDataDetailsShow(\'' + panel.id + '\')" style="margin-left:5px;"><span class="glyphicon glyphicon-time"></span></button>';
      row += '<button type="button" data-toggle="tooltip" title="Anlık!" class="dinamik btn btn-default btn-xs dinamik-'+panel.id+'" onClick="anlikShow(\'' + panel.id + '\')" style="margin-left:5px;"><span class="glyphicon glyphicon-hourglass"></span></button></td>';
      row += '</tr>';
      $('#panelTable').find('> tbody:last-child').append(row);
      $('#' + panel.id + '_show').click(function () {//bir günü özel olarak incelemek için
          showPanelDetail(panel);
      });
      $('#' + panel.id + '_showYears').click(function () {//bir günün yıllara göre dağılımı için
        showYillik=true;
          showPanelDetailYears(panel);
      });
  }

  /* Verileri gösterilecek panelleri seçiyoruz */
  function showPanelDetail(panel) {
      clearChart();
      $('#panelTable').find('button.anlik').removeClass('btn-success').addClass('btn-default');
      $('#' + panel.id + '_show').removeClass('btn-default').addClass('btn-success');

      $('#panelTable').find('button.anlik span').removeClass('glyphicon-eye-open').addClass('glyphicon-eye-close');
      $('#' + panel.id + '_glyph').removeClass('glyphicon-eye-close').addClass('glyphicon-eye-open');

      selectedPanelId = panel.id;

      if(!showCurrent) {
          var selectedDate = new Date($('#datetimepicker').datepicker( "getDate" ));
          var nextDay = addDays(selectedDate, 1);


          socket.emit('retrievePanelDataWithDate', selectedPanelId, selectedDate, nextDay);
      }
  }
  /* Yıllık verileri gösterilecek panelleri seçiyoruz */
  function showPanelDetailYears(panel) {
      //clearChart();
      clearInterval(Interval);
      $('#panelTable').find('button.yillar').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.anlik').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.yillik').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.gecmis').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.detayli').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.dinamik').removeClass('btn-success').addClass('btn-default');
      $('button.yillik-'+panel.id).removeClass('btn-default').addClass('btn-success');

      selectedPanelId = panel.id;

      selectedDate = new Date($('#datetimepicker').datepicker( "getDate" ));
      //var date = $(this).datepicker('getDate');
      day  = selectedDate.getDate();
      //var nextDay = addDays(selectedDate, 1);
      if(day != null){
        socket.emit('retrievePanelDataWithDateYears', selectedPanelId, day);
      }
  }

  function clearChart() {
      clearInterval(Interval);
      $('#panelTable').find('button.gecmis').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.yillik').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.yillar').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.detayli').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.dinamik').removeClass('btn-success').addClass('btn-default');
      $('#chartDiv').css('display', 'block');
      $('#chartTitle').css('display','block');
      $('#chartOldDataDiv').css('display', 'none');
      $('#chartOldDataYearsDiv').css('display', 'none');
      $('#chartDetailsDiv').css('display','none');
      $('#chartAnlikDiv').css('display','none');

      if (!chart) {
          chart = getChart();
      }

      if (chart) {
          var series = chart.series[0];
          series.setData([], true, true, true);
      }
  }

  function getChart() {
      return Highcharts.charts[0];
  }

  function updateChartWithCurrentData(panelData) {
      var x = (new Date(panelData.date)).getTime();

      var pointArr;

      if (chart.series[0].data.length == 0) {

          for (key in Series) {
              pointArr = [];
              pointArr.push([x, panelData[key]]);
              chart.series[Series[key].series].setData(pointArr, true, true, true);
          }

      }else if (chart.series[0].data.length <= 150) {
          for (key in Series) {
              chart.series[Series[key].series].addPoint([x, panelData[key]], true, false);
          }
      } else {
          for (key in Series) {
              chart.series[Series[key].series].addPoint([x, panelData[key]], true, true);
          }
      }
  }

  function updateChartWithHistoricalData() {
      var series = chart.series[0];
      var pointArr = [];
      var series2 = chart.series[1];
      var series3 = chart.series[2];
      var series4 = chart.series[3];

      var pointArr2 = [];
      var pointArr3 = [];
      var pointArr4 = [];

      for(var i = 0; i < dataListOfTheHistorical.length; i++) {
          var panelData = dataListOfTheHistorical[i];

          var x = (new Date(panelData.date)).getTime();
          var y = panelData["current"];
          pointArr.push([x, y]);
      }
      for(var i = 0; i < dataListOfTheHistorical.length; i++) {
          var panelData = dataListOfTheHistorical[i];

          var x = (new Date(panelData.date)).getTime();
          var y = panelData["voltage"];
          pointArr2.push([x, y]);
      }
      for(var i = 0; i < dataListOfTheHistorical.length; i++) {
          var panelData = dataListOfTheHistorical[i];

          var x = (new Date(panelData.date)).getTime();
          var y = panelData["temperature"];
          pointArr3.push([x, y]);
      }
      for(var i = 0; i < dataListOfTheHistorical.length; i++) {
          var panelData = dataListOfTheHistorical[i];

          var x = (new Date(panelData.date)).getTime();
          var y = panelData["moisture"];
          pointArr4.push([x, y]);
      }

      pointArr.sort(function(a,b) { return a[0] - b[0]; })
      pointArr2.sort(function(a,b) { return a[0] - b[0]; })
      pointArr3.sort(function(a,b) { return a[0] - b[0]; })
      pointArr4.sort(function(a,b) { return a[0] - b[0]; })

      series.setData(pointArr, true, false, true);
      series2.setData(pointArr2, true, false, true);
      series3.setData(pointArr3, true, false, true);
      series4.setData(pointArr4, true, false, true);

  }


  function getToday() {
      var today = new Date();
      var dd = today.getDate();
      var mm = today.getMonth() + 1; //January is 0!
      var yyyy = today.getFullYear();
      if (dd < 10) {
          dd = '0' + dd
      }
      if (mm < 10) {
          mm = '0' + mm
      }
      return mm + '/' + dd + '/' + yyyy;
  }

  function addDays(date, days) {
      var result = new Date(date);
      result.setDate(date.getDate() + days);
      return result;
  }

  $('#chartDiv').highcharts({
      chart: {
          type: 'spline',
          animation: Highcharts.svg,
          //ignoreHiddenSeries: false,
          height: 400
      },
      title: {text: ''},
      xAxis: {type: 'datetime'},
      yAxis: {title: {text: 'Değer'}},
      plotOptions: {spline: {lineWidth: 3, marker: {enabled: false},}},
      tooltip: {
          formatter: function () {
              return 'Tarih : '+Highcharts.dateFormat('%d-%m-%Y %H:%M:%S', this.x) + '<br/>'
                      + 'Değer: ' + Highcharts.numberFormat(this.y, 2);
          }
      },
      series: [{
          name: 'Akım',
          visible: true,
          data: []
      }, {
          name: 'Gerilim',
          visible: true,
          data: []
      }, {
          name: 'Sıcaklık',
          visible: true,
          data: []
      }, {
          name: 'Nem',
          visible: true,
          data: []
      }],
      legend: {
          enabled: true
      }
  });

  /* Geçmişe dönük kayıtlar görüntülenmek isteniyorsa bu fonk. çağırılıyor. */
  $('#datetimepicker').datepicker({
      useCurrent: false,
      maxDate: 0,
      onSelect: function (dateText) {
          if (selectedPanelId != null) {

            if(showYillik==true){ // Günün yıllara oranı isteniyorsa showYillik true yapılır buttona tıklandığında.

              clearChart();
              showCurrent = false;
              showYillik = false;
              var selectedDate = new Date(dateText);

              var date = $(this).datepicker('getDate');
              day  = date.getDate();

              socket.emit('retrievePanelDataWithDateYears', selectedPanelId, day);

            }else{ // Eskiye dönük özel olarak bir günün içeriği görüntülenmek istenirse burası çalıştırılır.
              clearChart();

              var chartTitle = document.getElementById('chartTitle');

              showCurrent = false;

              var selectedDate = new Date(dateText);
              var nextDay = addDays(selectedDate, 1);

              chartTitle.innerHTML = $.datepicker.formatDate('dd.mm.yy', selectedDate);

              socket.emit('retrievePanelDataWithDate', selectedPanelId, selectedDate, nextDay);

            }


          }
      }
  });

  function allDataShow(panelId) {
      clearInterval(Interval);
      $('#panelTable').find('button.anlik').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.yillik').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.gecmis').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.yillar').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.detayli').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.dinamik').removeClass('btn-success').addClass('btn-default');
      $('button.gecmis-'+panelId).removeClass('btn-default').addClass('btn-success');

      $('#chartTitle').css('display','none');
      $('#chartDiv').css('display','none');
      $('#chartOldDataDiv').css('display','block');
      $('#chartOldDataYearsDiv').css('display','none');
      $('#chartOldDataAllYearsDiv').css('display','none');
      $('#chartDetailsDiv').css('display','none');

      socket.emit('allDataShow', panelId, false);

  }

  function allDataAllYearsShow(panelId) {
    clearInterval(Interval);
      $('#panelTable').find('button.anlik').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.yillik').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.gecmis').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.yillar').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.detayli').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.dinamik').removeClass('btn-success').addClass('btn-default');
      $('button.yillar-'+panelId).removeClass('btn-default').addClass('btn-success');

      $('#chartTitle').css('display','none');
      $('#chartDiv').css('display','none');
      $('#chartOldDataDiv').css('display','none');
      $('#chartOldDataYearsDiv').css('display','none');
      $('#chartOldDataAllYearsDiv').css('display','block');
      $('#chartDetailsDiv').css('display','none');

      socket.emit('allDataAllYearsShow', panelId, false);
  }

  function anlikShow(panelId) {//Anlık inceleme
    clearInterval(Interval);
      $('#panelTable').find('button.anlik').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.yillik').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.gecmis').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.yillar').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.detayli').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.dinamik').removeClass('btn-success').addClass('btn-default');
      $('button.dinamik-'+panelId).removeClass('btn-default').addClass('btn-success');

      $('#chartTitle').css('display','none');
      $('#chartDiv').css('display','none');
      $('#chartOldDataDiv').css('display','none');
      $('#chartOldDataYearsDiv').css('display','none');
      $('#chartOldDataAllYearsDiv').css('display','none');
      $('#chartDetailsDiv').css('display','none');
      $('#chartAnlikDiv').css('display','block');

      var today = new Date();
      var tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate()+1);
      var selectedDate = new Date($('#datetimepicker').datepicker( "getDate" ));
      var nextDay = addDays(selectedDate, 1);

      var akim = [];
      var gerilim = [];
      var sicaklik = [];
      var nem = [];

      var pointArr = [];
      var pointArr2 = [];
      var pointArr3 = [];
      var pointArr4 = [];

      Highcharts.setOptions({
        global: {
            useUTC: false
        }
      });


      Highcharts.stockChart('chartAnlikDiv', {
          chart: {
              renderTo: 'chartAnlikDiv',
              type: 'spline',
              animation: Highcharts.svg,
              marginRight: 10,
              inverted: false,
              events: {
               load: function () {
                   var series0 = this.series[0];
                   var series1 = this.series[1];
                   var series2 = this.series[2];
                   var series3 = this.series[3];

                   socket.emit('retrieveBaslangicPanelDataAnlik', panelId, selectedDate , nextDay);

                   socket.on('showAnlikBaslangic', function (retData) {
                     //console.log(retData);

                     for(var i = 0; i < retData.length; i++) {
                         var panelData = retData[i];

                         var x = (new Date(panelData.date)).getTime();
                         var y = panelData["current"];
                         pointArr.push([x, y]);
                     }
                     for(var i = 0; i < retData.length; i++) {
                         var panelData = retData[i];

                         var x = (new Date(panelData.date)).getTime();
                         var y = panelData["voltage"];
                         pointArr2.push([x, y]);
                     }
                     for(var i = 0; i < retData.length; i++) {
                         var panelData = retData[i];

                         var x = (new Date(panelData.date)).getTime();
                         var y = panelData["temperature"];
                         pointArr3.push([x, y]);
                     }
                     for(var i = 0; i < retData.length; i++) {
                         var panelData = retData[i];

                         var x = (new Date(panelData.date)).getTime();
                         var y = panelData["moisture"];
                         pointArr4.push([x, y]);
                     }
                     pointArr.sort(function(a,b) { return a[0] - b[0]; })
                     pointArr2.sort(function(a,b) { return a[0] - b[0]; })
                     pointArr3.sort(function(a,b) { return a[0] - b[0]; })
                     pointArr4.sort(function(a,b) { return a[0] - b[0]; })

                     series0.setData(pointArr, true, false, true);
                     series1.setData(pointArr2, true, false, true);
                     series2.setData(pointArr3, true, false, true);
                     series3.setData(pointArr4, true, false, true);
                    });

                   Interval = setInterval(function () {
                     socket.emit('retrievePanelDataAnlik', panelId, today , tomorrow);

                   }, 1000);

                   socket.on('showAnlik', function (retData) {
                     //console.log(retData);

                     for (var i in retData) {
                         akim[i] = retData[i].current;
                         gerilim[i] = retData[i].voltage;
                         sicaklik[i] = retData[i].temperature;
                         nem[i] = retData[i].moisture;

                         var x = (new Date()).getTime();

                         series0.addPoint([x, akim[i]], true, true);
                         series1.addPoint([x, gerilim[i]], true, true);
                         series2.addPoint([x, sicaklik[i]], true, true);
                         series3.addPoint([x, nem[i]], true, true);
                     }

                    });
               }
             }
          },
          rangeSelector : {
                  enabled: true
          },
          title: {text: 'Canlı'},
          xAxis: {type: 'datetime',
                  tickPixelInterval: 150
                  //tickInterval: 24 * 3600 * 1000
                },
          yAxis: {title: {
                          text: 'Değer'
                      },
                  plotLines: [{
                  value: 0,
                  width: 1,
                  color: '#808080'
                    }]
                },
          plotOptions: {spline: {lineWidth: 3, marker: {enabled: false},}},
          tooltip: {
              formatter: function () {
                  return 'Tarih : '+ Highcharts.dateFormat('%d-%m-%Y %H:%M:%S', this.x) + '<br/>'
                          + 'Değer: ' + Highcharts.numberFormat(this.y, 2);
              }
          },
          legend: {
              enabled: true
          },
          exporting: {
            enabled: false
          },
          series: [{
            name: 'Akım',
            visible: true,
            data:[]
          }, {
            name: 'Gerilim',
            visible: true,
            data:[]
          }, {
            name: 'Sıcaklık',
            visible: true,
            data:[]
          }, {
            name: 'Nem',
            visible: true,
            data:[]
          }]
      });


  }


  function allDataDetailsShow(panelId) {//Detaylı inceleme
    clearInterval(Interval);
      $('#panelTable').find('button.anlik').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.yillik').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.gecmis').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.yillar').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.detayli').removeClass('btn-success').addClass('btn-default');
      $('#panelTable').find('button.dinamik').removeClass('btn-success').addClass('btn-default');
      $('button.detayli-'+panelId).removeClass('btn-default').addClass('btn-success');

      $('#chartTitle').css('display','none');
      $('#chartDiv').css('display','none');
      $('#chartOldDataDiv').css('display','none');
      $('#chartOldDataYearsDiv').css('display','none');
      $('#chartOldDataAllYearsDiv').css('display','none');
      $('#chartAnlikDiv').css('display','none');
      $('#chartDetailsDiv').css('display','block');


      socket.emit('retrieveDetails', panelId, false);
  }

  function updateChartWithDetailsData(){

    var pointArr = [];
    var pointArr2 = [];
    var pointArr3 = [];
    var pointArr4 = [];

    for(var i = 0; i < dataListOfTheDetail.length; i++) {
        var panelData = dataListOfTheDetail[i];

        var x = (new Date(panelData.date)).getTime();
        var y = panelData["current"];
        pointArr.push([x, y]);
    }
    for(var i = 0; i < dataListOfTheDetail.length; i++) {
        var panelData = dataListOfTheDetail[i];

        var x = (new Date(panelData.date)).getTime();
        var y = panelData["voltage"];
        pointArr2.push([x, y]);
    }
    for(var i = 0; i < dataListOfTheDetail.length; i++) {
        var panelData = dataListOfTheDetail[i];

        var x = (new Date(panelData.date)).getTime();
        var y = panelData["temperature"];
        pointArr3.push([x, y]);
    }
    for(var i = 0; i < dataListOfTheDetail.length; i++) {
        var panelData = dataListOfTheDetail[i];

        var x = (new Date(panelData.date)).getTime();
        var y = panelData["moisture"];
        pointArr4.push([x, y]);
    }

    //series.setData(pointArr, true, false, true);
    //series2.setData(pointArr2, true, false, true);
    //series3.setData(pointArr3, true, false, true);
    //series4.setData(pointArr4, true, false, true);


    Highcharts.stockChart('chartDetailsDiv', {
      chart: {
          renderTo: 'chartDetailsDiv',
          type: 'spline',
          animation: Highcharts.svg,
          //ignoreHiddenSeries: true,
          height: 400,
          inverted: false // "true" is not supported in Highstock
      },
      title: { //startOnTick: false, // only when navigator enabled
              //endOnTick: false,
        text: 'Detaylı Takip'},
      xAxis: {type: 'datetime'},
      yAxis: {title: {text: 'Değer'}},
      plotOptions: {spline:
                      {lineWidth: 3,
                        marker: {enabled: false},
                      },
      },

      rangeSelector : {
              enabled: true
      },
      tooltip: {
          formatter: function () {
              return 'Tarih : '+Highcharts.dateFormat('%d-%m-%Y %H:%M:%S', this.x) + '<br/>'
                      + 'Değer: ' + Highcharts.numberFormat(this.y, 2);
          }
          //pointFormat: '<span style="color:{series.color}">{series.name}</span>: <b>{point.y} </b><br/>',
      },
      series: [
        {
          name: 'Akım',
          visible: true,
          data: pointArr.sort(function(a,b) { return a[0] - b[0]; }),
          showInNavigator: true
      }, {
          name: 'Gerilim',
          visible: true,
          data: pointArr2.sort(function(a,b) { return a[0] - b[0]; }),
          showInNavigator: true
      }, {
          name: 'Sıcaklık',
          visible: true,
          data: pointArr3.sort(function(a,b) { return a[0] - b[0]; }),
          showInNavigator: true
      }, {
          name: 'Nem',
          visible: true,
          data: pointArr4.sort(function(a,b) { return a[0] - b[0]; }),
          showInNavigator: true
      }],
      legend: {
          enabled: true
      }
    });
  }

  socket.on('allShowDataListen', function (retData) {

      var chartData = [];
      var akim = [];
      var gerilim = [];
      var sicaklik = [];
      var nem = [];
      var chartDataYears = [];
      var names = [];

      for (var i in retData) {

        akim[i] = retData[i].ortAkim;
        gerilim[i] = retData[i].ortGerilim;
        sicaklik[i] = retData[i].ortSicaklik;
        nem[i] = retData[i].ortNem;
        names[i] = retData[i]._id.month + "-" + retData[i]._id.year;

          chartData[i] = {
              name: retData[i]._id.month + '-' + retData[i]._id.year,
              y: retData[i].ortAkim,
              drilldown: retData[i]._id.month + '-' + retData[i]._id.year
          };

      }



      $('#chartOldDataDiv').highcharts({

          chart: {type: 'column'},
          title: {text: 'Panelinin Ortalama Verileri'},
          subtitle: {text: 'Ortalama aylık verileri görmek için üzerine tıklayın.'},
          xAxis: {
            type: 'category',
            text: "name",
            categories: names,
            crosshair: true
          },
          yAxis: {
              title: {
                  text: 'Ortalama değerler'
              }
          },
          legend: {
              enabled: true
          },
          plotOptions: {
              series: {
                  borderWidth: 0,
                  dataLabels: {
                      enabled: true,
                      format: '{point.y:.1f}'
                  }
              }
          },

          tooltip: {
              //headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
              //pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y:.2f} kW/saat</b><br/>'
              headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
              pointFormat:  '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                            '<td style="padding:0"><b>{point.y:.1f} </b></td></tr>',
              footerFormat: '</table>',
              shared: true,
              useHTML: true
          },

          series: [{
                  name: 'Akım',
                  data: akim
                  }, {
                  name: 'Gerilim',
                  data: gerilim
                  }, {
                  name: 'Sıcaklık',
                  data: sicaklik
                  }, {
                  name: 'Nem',
                  data: nem
          }],




      });

  });


  socket.on('allShowDataListenYears', function (retData) {
    clearInterval(Interval);
    $('#chartTitle').css('display','none');
    $('#chartDiv').css('display','none');
    $('#chartOldDataDiv').css('display','none');
    $('#chartOldDataYearsDiv').css('display','block');
    $('#chartOldDataAllYearsDiv').css('display','none');
    $('#chartDetailsDiv').css('display','none');
    $('#chartAnlikDiv').css('display','none');

      var chartDataYears = [];
      var akim = [];
      var gerilim = [];
      var sicaklik = [];
      var nem = [];
      var chartDataYears = [];
      var names = [];

      for (var i in retData) {



          akim[i] = retData[i].ortAkim;
          gerilim[i] = retData[i].ortGerilim;
          sicaklik[i] = retData[i].ortSicaklik;
          nem[i] = retData[i].ortNem;
          names[i] = selectedDate.getDate() + "-" + retData[i]._id;

          chartDataYears[i] = {
              name: "",
              y: retData[i].ortAkim ,
              drilldown: selectedDate.getDate() + '-' + retData[i]._id
          };

      }


      $('#chartOldDataYearsDiv').highcharts({

          chart: {type: 'column'},
          title: {text: 'Panelinin Ortalama Verileri'},
          subtitle: {text: 'Yıllara göre ortalama günlük verileri görmek önce takvimdeki güne sonra büyüteçe üzerine tıklayın..'},
          xAxis: {
            type: 'category',
            text: "name",
            categories: names,
            crosshair: true
          },
          yAxis: {
              title: {
                  text: 'Ortalama Değerler'
              }

          },
          legend: {
              enabled: true
          },
          plotOptions: {
              series: {
                  borderWidth: 0,
                  dataLabels: {
                      enabled: true,
                      format: '{point.y:.1f} '
                  }
              }
          },
          tooltip: {
              //headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
              //pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y:.2f} kW/saat</b><br/>'
              headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
              pointFormat:  '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                            '<td style="padding:0"><b>{point.y:.1f} </b></td></tr>',
              footerFormat: '</table>',
              shared: true,
              useHTML: true
          },
          series: [{
                  name: 'Akım',
                  data: akim
                  }, {
                  name: 'Gerilim',
                  data: gerilim
                  }, {
                  name: 'Sıcaklık',
                  data: sicaklik
                  }, {
                  name: 'Nem',
                  data: nem
          }]

      });

  });

  socket.on('allShowDataListenAllYears', function (retData) {
    clearInterval(Interval);
    $('#chartTitle').css('display','none');
    $('#chartDiv').css('display','none');
    $('#chartOldDataDiv').css('display','none');
    $('#chartOldDataYearsDiv').css('display','none');
    $('#chartOldDataAllYearsDiv').css('display','block');
    $('#chartDetailsDiv').css('display','none');
    $('#chartAnlikDiv').css('display','none');


      var chartDataYears = [];
      var akim = [];
      var gerilim = [];
      var sicaklik = [];
      var nem = [];
      var chartDataYears = [];
      var names = [];

      for (var i in retData) {


          akim[i] = retData[i].ortAkim;
          gerilim[i] = retData[i].ortGerilim;
          sicaklik[i] = retData[i].ortSicaklik;
          nem[i] = retData[i].ortNem;
          names[i] = retData[i]._id.year;

          chartDataYears[i] = {
              name: "",
              y: retData[i].ortAkim ,
              drilldown: retData[i]._id.year
          };

      }


      $('#chartOldDataAllYearsDiv').highcharts({

          chart: {type: 'column'},
          title: {text: 'Panelinin Ortalama Verileri'},
          subtitle: {text: 'Yıllara göre ortalama verileri görmek için üzerine tıklayın.'},
          xAxis: {
            type: 'category',
            text: "name",
            categories: names,
            crosshair: true
          },
          yAxis: {
              title: {
                  text: 'Ortalama Değerler'
              }

          },
          legend: {
              enabled: true
          },
          plotOptions: {
              series: {
                  borderWidth: 0,
                  dataLabels: {
                      enabled: true,
                      format: '{point.y:.1f} '
                  }
              }
          },
          tooltip: {
              //headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
              //pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y:.2f} kW/saat</b><br/>'
              headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
              pointFormat:  '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                            '<td style="padding:0"><b>{point.y:.1f} </b></td></tr>',
              footerFormat: '</table>',
              shared: true,
              useHTML: true
          },
          series: [{
                  name: 'Akım',
                  data: akim
                  }, {
                  name: 'Gerilim',
                  data: gerilim
                  }, {
                  name: 'Sıcaklık',
                  data: sicaklik
                  }, {
                  name: 'Nem',
                  data: nem
          }]

      });
  });



</script>
</body>
</html>
